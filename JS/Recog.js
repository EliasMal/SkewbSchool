window.addEventListener("load", init, false);

let cases = ["Z", "H", "U", "U", "U", "TS", "ZC", "ZC", "O", "O", "S", "S", "X", "X", "W", "W"];
let algs = ["r' B r' B' z' r' R' r z B r'", "r' R r R' z2 R r' R' r z2 r' R r R'", "r' R r R' z2 r' R r R' z2", "b' r' R r R' z2 r' R r z2",
    "r' R' r z2 R r' R' r b z2", "r' R r R' r' R r R' r' R r R'", "R r R' B' r' B' r B", "r' R' r b z r B r' z' b'", "b r' R r R' z2 r' R r R",
    "B' r' R r R' z2 r' R r R' r", "B' r' R r R' r B' r' R r R' r", "r B r' R r' R' r B r' R r' R'", "r' R B R' r B R' z b' r R'",
    "R' b R r' R' r R' b R r' R' r", "r' R r R' b' R r' R r R' b' R", "r B' r' R r R' r B' r' R r R'"];
let rotations =  ["", "y", "y'", "y2"];
let index;
let rotation;
function init() {
    document.getElementById("new O case").addEventListener("click", showOScramble, false);
    document.getElementById("new U case").addEventListener("click", showUScramble, false);
    document.getElementById("check").addEventListener("click", showFullScramble, false);
    showOScramble();
}

function getRandomScramble(){
index = Math.round(Math.random() * 15);
rotation = Math.round(Math.random() * 3);
}

function showOScramble(){
    getRandomScramble();
    showScrambleO("x' " + algs[index] + " x' " + rotations[rotation]);
}

function showUScramble(){
    getRandomScramble();
    showScrambleU("x' " + algs[index] + " x' " + rotations[rotation]);
}



function showFullScramble(){
    showScrambleFull("x' " + algs[index] + " x' " + rotations[rotation]);
}

function showScrambleO(scramble) {
    const stickercol = ["o", "o", "o", "o", "o", "g", "g", "g", "g", "g", "y", "y", "y", "y", "y",
        "w", "w", "w", "w", "w", "r", "r", "r", "r", "r", "b", "b", "b", "b", "b"];
    var scrsplit = scramble.split(" ");
        for (var i = 0; i < scrsplit.length; i++) {
            if (scrsplit[i] === "x") {
                fourswap(stickercol, 15, 25, 10, 5);
                fourswap(stickercol, 24, 21, 22, 23);
                fourswap(stickercol, 2, 1, 4, 3);
                fourswap(stickercol, 17, 29, 12, 7);
                fourswap(stickercol, 6, 16, 28, 11);
                fourswap(stickercol, 9, 19, 27, 14);
                fourswap(stickercol, 18, 26, 13, 8);
            } else if (scrsplit[i] === "x'") {
                fourswap(stickercol, 5, 10, 25, 15);
                fourswap(stickercol, 23, 22, 21, 24);
                fourswap(stickercol, 3, 4, 1, 2);
                fourswap(stickercol, 7, 12, 29, 17);
                fourswap(stickercol, 11, 28, 16, 6);
                fourswap(stickercol, 14, 27, 19, 9);
                fourswap(stickercol, 8, 13, 26, 18);
            } else if (scrsplit[i] === "x2") {
                fourswap(stickercol, 5, 10, 25, 15);
                fourswap(stickercol, 23, 22, 21, 24);
                fourswap(stickercol, 3, 4, 1, 2);
                fourswap(stickercol, 7, 12, 29, 17);
                fourswap(stickercol, 11, 28, 16, 6);
                fourswap(stickercol, 14, 27, 19, 9);
                fourswap(stickercol, 8, 13, 26, 18);
                fourswap(stickercol, 5, 10, 25, 15);
                fourswap(stickercol, 23, 22, 21, 24);
                fourswap(stickercol, 3, 4, 1, 2);
                fourswap(stickercol, 7, 12, 29, 17);
                fourswap(stickercol, 11, 28, 16, 6);
                fourswap(stickercol, 14, 27, 19, 9);
                fourswap(stickercol, 8, 13, 26, 18);
            } else if (scrsplit[i] === "y") {
                fourswap(stickercol, 19, 16, 17, 18);
                fourswap(stickercol, 14, 13, 12, 11);
                fourswap(stickercol, 25, 20, 5, 0);
                fourswap(stickercol, 21, 6, 1, 26);
                fourswap(stickercol, 29, 24, 9, 4);
                fourswap(stickercol, 23, 8, 3, 28);
                fourswap(stickercol, 27, 22, 7, 2);
            } else if (scrsplit[i] === "y'") {
                fourswap(stickercol, 18, 17, 16, 19);
                fourswap(stickercol, 11, 12, 13, 14);
                fourswap(stickercol, 0, 5, 20, 25);
                fourswap(stickercol, 26, 1, 6, 21);
                fourswap(stickercol, 4, 9, 24, 29);
                fourswap(stickercol, 28, 3, 8, 23);
                fourswap(stickercol, 2, 7, 22, 27);
            } else if (scrsplit[i] === "y'") {
                fourswap(stickercol, 18, 17, 16, 19);
                fourswap(stickercol, 11, 12, 13, 14);
                fourswap(stickercol, 0, 5, 20, 25);
                fourswap(stickercol, 26, 1, 6, 21);
                fourswap(stickercol, 4, 9, 24, 29);
                fourswap(stickercol, 28, 3, 8, 23);
                fourswap(stickercol, 2, 7, 22, 27);
                fourswap(stickercol, 18, 17, 16, 19);
                fourswap(stickercol, 11, 12, 13, 14);
                fourswap(stickercol, 0, 5, 20, 25);
                fourswap(stickercol, 26, 1, 6, 21);
                fourswap(stickercol, 4, 9, 24, 29);
                fourswap(stickercol, 28, 3, 8, 23);
                fourswap(stickercol, 2, 7, 22, 27);
            } else if (scrsplit[i] === "z") {
                fourswap(stickercol, 15, 20, 10, 0);
                fourswap(stickercol, 9, 6, 7, 8);
                fourswap(stickercol, 29, 28, 27, 26);
                fourswap(stickercol, 18, 24, 11, 2);
                fourswap(stickercol, 17, 23, 14, 1);
                fourswap(stickercol, 19, 21, 12, 3);
                fourswap(stickercol, 16, 22, 13, 4);
            } else if (scrsplit[i] === "z'") {
                fourswap(stickercol, 0, 10, 20, 15);
                fourswap(stickercol, 8, 7, 6, 9);
                fourswap(stickercol, 26, 27, 28, 29);
                fourswap(stickercol, 2, 11, 24, 18);
                fourswap(stickercol, 1, 14, 23, 17);
                fourswap(stickercol, 3, 12, 21, 19);
                fourswap(stickercol, 4, 13, 22, 16);
            } else if (scrsplit[i] === "z2") {
                fourswap(stickercol, 0, 10, 20, 15);
                fourswap(stickercol, 8, 7, 6, 9);
                fourswap(stickercol, 26, 27, 28, 29);
                fourswap(stickercol, 2, 11, 24, 18);
                fourswap(stickercol, 1, 14, 23, 17);
                fourswap(stickercol, 3, 12, 21, 19);
                fourswap(stickercol, 4, 13, 22, 16);
                fourswap(stickercol, 0, 10, 20, 15);
                fourswap(stickercol, 8, 7, 6, 9);
                fourswap(stickercol, 26, 27, 28, 29);
                fourswap(stickercol, 2, 11, 24, 18);
                fourswap(stickercol, 1, 14, 23, 17);
                fourswap(stickercol, 3, 12, 21, 19);
                fourswap(stickercol, 4, 13, 22, 16);
            } else if (scrsplit[i] === "r" || scrsplit[i] === "r'2") {
                threeswap(stickercol, 3, 7, 16);
                threeswap(stickercol, 10, 20, 25);
                threeswap(stickercol, 11, 21, 27);
                threeswap(stickercol, 12, 22, 28);
                threeswap(stickercol, 13, 23, 29);
            } else if (scrsplit[i] === "r'" || scrsplit[i] === "r2") {
                threeswap(stickercol, 16, 7, 3);
                threeswap(stickercol, 25, 20, 10);
                threeswap(stickercol, 27, 21, 11);
                threeswap(stickercol, 28, 22, 12);
                threeswap(stickercol, 29, 23, 13);
            } else if (scrsplit[i] === "R" || scrsplit[i] === "R'2") {
                threeswap(stickercol, 15, 25, 20);
                threeswap(stickercol, 16, 29, 21);
                threeswap(stickercol, 17, 26, 22);
                threeswap(stickercol, 24, 19, 28);
                threeswap(stickercol, 6, 4, 12);
            } else if (scrsplit[i] === "R'" || scrsplit[i] === "R2") {
                threeswap(stickercol, 20, 25, 15);
                threeswap(stickercol, 21, 29, 16);
                threeswap(stickercol, 22, 26, 17);
                threeswap(stickercol, 28, 19, 24);
                threeswap(stickercol, 12, 4, 6);
            } else if (scrsplit[i] === "l" || scrsplit[i] === "L" || scrsplit[i] === "l'2" || scrsplit[i] === "L'2") {
                threeswap(stickercol, 0, 5, 10);
                threeswap(stickercol, 1, 7, 13);
                threeswap(stickercol, 2, 8, 14);
                threeswap(stickercol, 3, 9, 11);
                threeswap(stickercol, 18, 23, 27);
            } else if (scrsplit[i] === "l'" || scrsplit[i] === "L'" || scrsplit[i] === "l2" || scrsplit[i] === "L2") {
                threeswap(stickercol, 10, 5, 0);
                threeswap(stickercol, 13, 7, 1);
                threeswap(stickercol, 14, 8, 2);
                threeswap(stickercol, 11, 9, 3);
                threeswap(stickercol, 27, 23, 18);
            } else if (scrsplit[i] === "f" || scrsplit[i] === "f'2") {
                threeswap(stickercol, 5, 20, 10);
                threeswap(stickercol, 7, 23, 11);
                threeswap(stickercol, 17, 28, 2);
                threeswap(stickercol, 24, 12, 8);
                threeswap(stickercol, 6, 22, 14);
            } else if (scrsplit[i] === "f'" || scrsplit[i] === "f2") {
                threeswap(stickercol, 10, 20, 5);
                threeswap(stickercol, 11, 23, 7);
                threeswap(stickercol, 2, 28, 17);
                threeswap(stickercol, 8, 12, 24);
                threeswap(stickercol, 14, 22, 6);
            } else if (scrsplit[i] === "B" || scrsplit[i] === "U" || scrsplit[i] === "B'2" || scrsplit[i] === "U'2") {
                threeswap(stickercol, 0, 25, 15);
                threeswap(stickercol, 1, 27, 16);
                threeswap(stickercol, 3, 29, 18);
                threeswap(stickercol, 4, 26, 19);
                threeswap(stickercol, 9, 13, 21);
            } else if (scrsplit[i] === "B'" || scrsplit[i] === "U'" || scrsplit[i] === "B2" || scrsplit[i] === "U2") {
                threeswap(stickercol, 15, 25, 0);
                threeswap(stickercol, 16, 27, 1);
                threeswap(stickercol, 18, 29, 3);
                threeswap(stickercol, 19, 26, 4);
                threeswap(stickercol, 21, 13, 9);
            } else if (scrsplit[i] === "b" || scrsplit[i] === "b'2") {
                threeswap(stickercol, 0, 10, 25);
                threeswap(stickercol, 2, 12, 26);
                threeswap(stickercol, 3, 13, 27);
                threeswap(stickercol, 4, 14, 28);
                threeswap(stickercol, 8, 22, 19);
            } else if (scrsplit[i] === "b'" || scrsplit[i] === "b2"){
                threeswap(stickercol, 25, 10, 0);
                threeswap(stickercol, 26, 12, 2);
                threeswap(stickercol, 27, 13, 3);
                threeswap(stickercol, 28, 14, 4);
                threeswap(stickercol, 19, 22, 8);
            }
        }

    let canvas = document.getElementById("image");
    let ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.translate(10, 10);
    ctx.strokeStyle = "black";
    ctx.lineWidth = 3;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    /*ctx.fillStyle = corrcol(stickercol, 0);
    ctx.beginPath();
    ctx.moveTo(0.0, 75.0);
    ctx.lineTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 1);
    ctx.beginPath();
    ctx.moveTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.lineTo(60, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 2);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(120, 210);
    ctx.lineTo(60, 180);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 3);
    ctx.beginPath();
    ctx.moveTo(0, 75);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 150);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 4);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(60, 30);
    ctx.lineTo(0, 75);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();*/
    ctx.fillStyle = corrcol(stickercol, 5);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 6);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 7);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(240, 270);
    ctx.lineTo(180, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 8);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 210);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 9);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 10);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 285);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 11);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 12);
    ctx.beginPath();
    ctx.moveTo(240, 345);
    ctx.lineTo(240, 420);
    ctx.lineTo(180, 390);
    ctx.lineTo(240, 345);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 13);
    ctx.beginPath();
    ctx.moveTo(120, 285);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 360);
    ctx.lineTo(120, 285);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 14);
    ctx.beginPath();
    ctx.moveTo(120, 210);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 285);
    ctx.lineTo(120, 210);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 15);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(180, 30);
    ctx.lineTo(300, 30);
    ctx.lineTo(300, 90);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 16);
    ctx.beginPath();
    ctx.moveTo(300, 30);
    ctx.lineTo(360, 60);
    ctx.lineTo(300, 90);
    ctx.lineTo(300, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 17);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 18);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 30);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 19);
    ctx.beginPath();
    ctx.moveTo(180, 30);
    ctx.lineTo(240, 0);
    ctx.lineTo(300, 30);
    ctx.lineTo(180, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 20);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 90);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 21);
    ctx.beginPath();
    ctx.moveTo(300, 90);
    ctx.lineTo(360, 60);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 22);
    ctx.beginPath();
    ctx.moveTo(300, 240);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 210);
    ctx.lineTo(300, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 23);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 24);
    ctx.beginPath();
    ctx.moveTo(240, 120);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(240, 120);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    /*ctx.fillStyle = corrcol(stickercol, 25);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 30);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 26);
    ctx.beginPath();
    ctx.moveTo(420, 30);
    ctx.lineTo(480, 0);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 27);
    ctx.beginPath();
    ctx.moveTo(420, 180);
    ctx.lineTo(480, 75);
    ctx.lineTo(480, 150);
    ctx.lineTo(420, 180);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 28);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 210);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 29);
    ctx.beginPath();
    ctx.moveTo(360, 60);
    ctx.lineTo(420, 30);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();*/
    ctx.translate(-10, -10);
}

function showScrambleU(scramble) {
    const stickercol = ["o", "o", "o", "o", "o", "g", "g", "g", "g", "g", "y", "y", "y", "y", "y",
        "w", "w", "w", "w", "w", "r", "r", "r", "r", "r", "b", "b", "b", "b", "b"];
    var scrsplit = scramble.split(" ");
    for (var i = 0; i < scrsplit.length; i++) {
        if (scrsplit[i] === "x") {
            fourswap(stickercol, 15, 25, 10, 5);
            fourswap(stickercol, 24, 21, 22, 23);
            fourswap(stickercol, 2, 1, 4, 3);
            fourswap(stickercol, 17, 29, 12, 7);
            fourswap(stickercol, 6, 16, 28, 11);
            fourswap(stickercol, 9, 19, 27, 14);
            fourswap(stickercol, 18, 26, 13, 8);
        } else if (scrsplit[i] === "x'") {
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
        } else if (scrsplit[i] === "x2") {
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
        } else if (scrsplit[i] === "y") {
            fourswap(stickercol, 19, 16, 17, 18);
            fourswap(stickercol, 14, 13, 12, 11);
            fourswap(stickercol, 25, 20, 5, 0);
            fourswap(stickercol, 21, 6, 1, 26);
            fourswap(stickercol, 29, 24, 9, 4);
            fourswap(stickercol, 23, 8, 3, 28);
            fourswap(stickercol, 27, 22, 7, 2);
        } else if (scrsplit[i] === "y'") {
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
        } else if (scrsplit[i] === "y'") {
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
        } else if (scrsplit[i] === "z") {
            fourswap(stickercol, 15, 20, 10, 0);
            fourswap(stickercol, 9, 6, 7, 8);
            fourswap(stickercol, 29, 28, 27, 26);
            fourswap(stickercol, 18, 24, 11, 2);
            fourswap(stickercol, 17, 23, 14, 1);
            fourswap(stickercol, 19, 21, 12, 3);
            fourswap(stickercol, 16, 22, 13, 4);
        } else if (scrsplit[i] === "z'") {
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
        } else if (scrsplit[i] === "z2") {
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
        } else if (scrsplit[i] === "r" || scrsplit[i] === "r'2") {
            threeswap(stickercol, 3, 7, 16);
            threeswap(stickercol, 10, 20, 25);
            threeswap(stickercol, 11, 21, 27);
            threeswap(stickercol, 12, 22, 28);
            threeswap(stickercol, 13, 23, 29);
        } else if (scrsplit[i] === "r'" || scrsplit[i] === "r2") {
            threeswap(stickercol, 16, 7, 3);
            threeswap(stickercol, 25, 20, 10);
            threeswap(stickercol, 27, 21, 11);
            threeswap(stickercol, 28, 22, 12);
            threeswap(stickercol, 29, 23, 13);
        } else if (scrsplit[i] === "R" || scrsplit[i] === "R'2") {
            threeswap(stickercol, 15, 25, 20);
            threeswap(stickercol, 16, 29, 21);
            threeswap(stickercol, 17, 26, 22);
            threeswap(stickercol, 24, 19, 28);
            threeswap(stickercol, 6, 4, 12);
        } else if (scrsplit[i] === "R'" || scrsplit[i] === "R2") {
            threeswap(stickercol, 20, 25, 15);
            threeswap(stickercol, 21, 29, 16);
            threeswap(stickercol, 22, 26, 17);
            threeswap(stickercol, 28, 19, 24);
            threeswap(stickercol, 12, 4, 6);
        } else if (scrsplit[i] === "l" || scrsplit[i] === "L" || scrsplit[i] === "l'2" || scrsplit[i] === "L'2") {
            threeswap(stickercol, 0, 5, 10);
            threeswap(stickercol, 1, 7, 13);
            threeswap(stickercol, 2, 8, 14);
            threeswap(stickercol, 3, 9, 11);
            threeswap(stickercol, 18, 23, 27);
        } else if (scrsplit[i] === "l'" || scrsplit[i] === "L'" || scrsplit[i] === "l2" || scrsplit[i] === "L2") {
            threeswap(stickercol, 10, 5, 0);
            threeswap(stickercol, 13, 7, 1);
            threeswap(stickercol, 14, 8, 2);
            threeswap(stickercol, 11, 9, 3);
            threeswap(stickercol, 27, 23, 18);
        } else if (scrsplit[i] === "f" || scrsplit[i] === "f'2") {
            threeswap(stickercol, 5, 20, 10);
            threeswap(stickercol, 7, 23, 11);
            threeswap(stickercol, 17, 28, 2);
            threeswap(stickercol, 24, 12, 8);
            threeswap(stickercol, 6, 22, 14);
        } else if (scrsplit[i] === "f'" || scrsplit[i] === "f2") {
            threeswap(stickercol, 10, 20, 5);
            threeswap(stickercol, 11, 23, 7);
            threeswap(stickercol, 2, 28, 17);
            threeswap(stickercol, 8, 12, 24);
            threeswap(stickercol, 14, 22, 6);
        } else if (scrsplit[i] === "B" || scrsplit[i] === "U" || scrsplit[i] === "B'2" || scrsplit[i] === "U'2") {
            threeswap(stickercol, 0, 25, 15);
            threeswap(stickercol, 1, 27, 16);
            threeswap(stickercol, 3, 29, 18);
            threeswap(stickercol, 4, 26, 19);
            threeswap(stickercol, 9, 13, 21);
        } else if (scrsplit[i] === "B'" || scrsplit[i] === "U'" || scrsplit[i] === "B2" || scrsplit[i] === "U2") {
            threeswap(stickercol, 15, 25, 0);
            threeswap(stickercol, 16, 27, 1);
            threeswap(stickercol, 18, 29, 3);
            threeswap(stickercol, 19, 26, 4);
            threeswap(stickercol, 21, 13, 9);
        } else if (scrsplit[i] === "b" || scrsplit[i] === "b'2") {
            threeswap(stickercol, 0, 10, 25);
            threeswap(stickercol, 2, 12, 26);
            threeswap(stickercol, 3, 13, 27);
            threeswap(stickercol, 4, 14, 28);
            threeswap(stickercol, 8, 22, 19);
        } else if (scrsplit[i] === "b'" || scrsplit[i] === "b2"){
            threeswap(stickercol, 25, 10, 0);
            threeswap(stickercol, 26, 12, 2);
            threeswap(stickercol, 27, 13, 3);
            threeswap(stickercol, 28, 14, 4);
            threeswap(stickercol, 19, 22, 8);
        }
    }

    let canvas = document.getElementById("image");
    let ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.translate(10, 10);
    ctx.strokeStyle = "black";
    ctx.lineWidth = 3;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    ctx.fillStyle = corrcol(stickercol, 0);
    ctx.beginPath();
    ctx.moveTo(0.0, 75.0);
    ctx.lineTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 1);
    ctx.beginPath();
    ctx.moveTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.lineTo(60, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 2);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(120, 210);
    ctx.lineTo(60, 180);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 3);
    ctx.beginPath();
    ctx.moveTo(0, 75);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 150);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 4);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(60, 30);
    ctx.lineTo(0, 75);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 5);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 6);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 7);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(240, 270);
    ctx.lineTo(180, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 8);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 210);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 9);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 10);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 285);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 11);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 12);
    ctx.beginPath();
    ctx.moveTo(240, 345);
    ctx.lineTo(240, 420);
    ctx.lineTo(180, 390);
    ctx.lineTo(240, 345);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 13);
    ctx.beginPath();
    ctx.moveTo(120, 285);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 360);
    ctx.lineTo(120, 285);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 14);
    ctx.beginPath();
    ctx.moveTo(120, 210);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 285);
    ctx.lineTo(120, 210);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();/*
    ctx.fillStyle = corrcol(stickercol, 15);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(180, 30);
    ctx.lineTo(300, 30);
    ctx.lineTo(300, 90);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 16);
    ctx.beginPath();
    ctx.moveTo(300, 30);
    ctx.lineTo(360, 60);
    ctx.lineTo(300, 90);
    ctx.lineTo(300, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 17);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 18);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 30);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 19);
    ctx.beginPath();
    ctx.moveTo(180, 30);
    ctx.lineTo(240, 0);
    ctx.lineTo(300, 30);
    ctx.lineTo(180, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();*/
    ctx.fillStyle = corrcol(stickercol, 20);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 90);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 21);
    ctx.beginPath();
    ctx.moveTo(300, 90);
    ctx.lineTo(360, 60);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 22);
    ctx.beginPath();
    ctx.moveTo(300, 240);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 210);
    ctx.lineTo(300, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 23);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 24);
    ctx.beginPath();
    ctx.moveTo(240, 120);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(240, 120);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    /*ctx.fillStyle = corrcol(stickercol, 25);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 30);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 26);
    ctx.beginPath();
    ctx.moveTo(420, 30);
    ctx.lineTo(480, 0);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 27);
    ctx.beginPath();
    ctx.moveTo(420, 180);
    ctx.lineTo(480, 75);
    ctx.lineTo(480, 150);
    ctx.lineTo(420, 180);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 28);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 210);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 29);
    ctx.beginPath();
    ctx.moveTo(360, 60);
    ctx.lineTo(420, 30);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();*/
    ctx.translate(-10, -10);
}


function showScrambleFull(scramble) {
    const stickercol = ["o", "o", "o", "o", "o", "g", "g", "g", "g", "g", "y", "y", "y", "y", "y",
        "w", "w", "w", "w", "w", "r", "r", "r", "r", "r", "b", "b", "b", "b", "b"];
    var scrsplit = scramble.split(" ");
    for (var i = 0; i < scrsplit.length; i++) {
        if (scrsplit[i] === "x") {
            fourswap(stickercol, 15, 25, 10, 5);
            fourswap(stickercol, 24, 21, 22, 23);
            fourswap(stickercol, 2, 1, 4, 3);
            fourswap(stickercol, 17, 29, 12, 7);
            fourswap(stickercol, 6, 16, 28, 11);
            fourswap(stickercol, 9, 19, 27, 14);
            fourswap(stickercol, 18, 26, 13, 8);
        } else if (scrsplit[i] === "x'") {
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
        } else if (scrsplit[i] === "x2") {
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
            fourswap(stickercol, 5, 10, 25, 15);
            fourswap(stickercol, 23, 22, 21, 24);
            fourswap(stickercol, 3, 4, 1, 2);
            fourswap(stickercol, 7, 12, 29, 17);
            fourswap(stickercol, 11, 28, 16, 6);
            fourswap(stickercol, 14, 27, 19, 9);
            fourswap(stickercol, 8, 13, 26, 18);
        } else if (scrsplit[i] === "y") {
            fourswap(stickercol, 19, 16, 17, 18);
            fourswap(stickercol, 14, 13, 12, 11);
            fourswap(stickercol, 25, 20, 5, 0);
            fourswap(stickercol, 21, 6, 1, 26);
            fourswap(stickercol, 29, 24, 9, 4);
            fourswap(stickercol, 23, 8, 3, 28);
            fourswap(stickercol, 27, 22, 7, 2);
        } else if (scrsplit[i] === "y'") {
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
        } else if (scrsplit[i] === "y'") {
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
            fourswap(stickercol, 18, 17, 16, 19);
            fourswap(stickercol, 11, 12, 13, 14);
            fourswap(stickercol, 0, 5, 20, 25);
            fourswap(stickercol, 26, 1, 6, 21);
            fourswap(stickercol, 4, 9, 24, 29);
            fourswap(stickercol, 28, 3, 8, 23);
            fourswap(stickercol, 2, 7, 22, 27);
        } else if (scrsplit[i] === "z") {
            fourswap(stickercol, 15, 20, 10, 0);
            fourswap(stickercol, 9, 6, 7, 8);
            fourswap(stickercol, 29, 28, 27, 26);
            fourswap(stickercol, 18, 24, 11, 2);
            fourswap(stickercol, 17, 23, 14, 1);
            fourswap(stickercol, 19, 21, 12, 3);
            fourswap(stickercol, 16, 22, 13, 4);
        } else if (scrsplit[i] === "z'") {
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
        } else if (scrsplit[i] === "z2") {
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
            fourswap(stickercol, 0, 10, 20, 15);
            fourswap(stickercol, 8, 7, 6, 9);
            fourswap(stickercol, 26, 27, 28, 29);
            fourswap(stickercol, 2, 11, 24, 18);
            fourswap(stickercol, 1, 14, 23, 17);
            fourswap(stickercol, 3, 12, 21, 19);
            fourswap(stickercol, 4, 13, 22, 16);
        } else if (scrsplit[i] === "r" || scrsplit[i] === "r'2") {
            threeswap(stickercol, 3, 7, 16);
            threeswap(stickercol, 10, 20, 25);
            threeswap(stickercol, 11, 21, 27);
            threeswap(stickercol, 12, 22, 28);
            threeswap(stickercol, 13, 23, 29);
        } else if (scrsplit[i] === "r'" || scrsplit[i] === "r2") {
            threeswap(stickercol, 16, 7, 3);
            threeswap(stickercol, 25, 20, 10);
            threeswap(stickercol, 27, 21, 11);
            threeswap(stickercol, 28, 22, 12);
            threeswap(stickercol, 29, 23, 13);
        } else if (scrsplit[i] === "R" || scrsplit[i] === "R'2") {
            threeswap(stickercol, 15, 25, 20);
            threeswap(stickercol, 16, 29, 21);
            threeswap(stickercol, 17, 26, 22);
            threeswap(stickercol, 24, 19, 28);
            threeswap(stickercol, 6, 4, 12);
        } else if (scrsplit[i] === "R'" || scrsplit[i] === "R2") {
            threeswap(stickercol, 20, 25, 15);
            threeswap(stickercol, 21, 29, 16);
            threeswap(stickercol, 22, 26, 17);
            threeswap(stickercol, 28, 19, 24);
            threeswap(stickercol, 12, 4, 6);
        } else if (scrsplit[i] === "l" || scrsplit[i] === "L" || scrsplit[i] === "l'2" || scrsplit[i] === "L'2") {
            threeswap(stickercol, 0, 5, 10);
            threeswap(stickercol, 1, 7, 13);
            threeswap(stickercol, 2, 8, 14);
            threeswap(stickercol, 3, 9, 11);
            threeswap(stickercol, 18, 23, 27);
        } else if (scrsplit[i] === "l'" || scrsplit[i] === "L'" || scrsplit[i] === "l2" || scrsplit[i] === "L2") {
            threeswap(stickercol, 10, 5, 0);
            threeswap(stickercol, 13, 7, 1);
            threeswap(stickercol, 14, 8, 2);
            threeswap(stickercol, 11, 9, 3);
            threeswap(stickercol, 27, 23, 18);
        } else if (scrsplit[i] === "f" || scrsplit[i] === "f'2") {
            threeswap(stickercol, 5, 20, 10);
            threeswap(stickercol, 7, 23, 11);
            threeswap(stickercol, 17, 28, 2);
            threeswap(stickercol, 24, 12, 8);
            threeswap(stickercol, 6, 22, 14);
        } else if (scrsplit[i] === "f'" || scrsplit[i] === "f2") {
            threeswap(stickercol, 10, 20, 5);
            threeswap(stickercol, 11, 23, 7);
            threeswap(stickercol, 2, 28, 17);
            threeswap(stickercol, 8, 12, 24);
            threeswap(stickercol, 14, 22, 6);
        } else if (scrsplit[i] === "B" || scrsplit[i] === "U" || scrsplit[i] === "B'2" || scrsplit[i] === "U'2") {
            threeswap(stickercol, 0, 25, 15);
            threeswap(stickercol, 1, 27, 16);
            threeswap(stickercol, 3, 29, 18);
            threeswap(stickercol, 4, 26, 19);
            threeswap(stickercol, 9, 13, 21);
        } else if (scrsplit[i] === "B'" || scrsplit[i] === "U'" || scrsplit[i] === "B2" || scrsplit[i] === "U2") {
            threeswap(stickercol, 15, 25, 0);
            threeswap(stickercol, 16, 27, 1);
            threeswap(stickercol, 18, 29, 3);
            threeswap(stickercol, 19, 26, 4);
            threeswap(stickercol, 21, 13, 9);
        } else if (scrsplit[i] === "b" || scrsplit[i] === "b'2") {
            threeswap(stickercol, 0, 10, 25);
            threeswap(stickercol, 2, 12, 26);
            threeswap(stickercol, 3, 13, 27);
            threeswap(stickercol, 4, 14, 28);
            threeswap(stickercol, 8, 22, 19);
        } else if (scrsplit[i] === "b'" || scrsplit[i] === "b2"){
            threeswap(stickercol, 25, 10, 0);
            threeswap(stickercol, 26, 12, 2);
            threeswap(stickercol, 27, 13, 3);
            threeswap(stickercol, 28, 14, 4);
            threeswap(stickercol, 19, 22, 8);
        }
    }

    let canvas = document.getElementById("image");
    let ctx = canvas.getContext('2d');
    ctx.translate(10, 10);
    ctx.strokeStyle = "black";
    ctx.lineWidth = 3;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    ctx.fillStyle = corrcol(stickercol, 0);
    ctx.beginPath();
    ctx.moveTo(0.0, 75.0);
    ctx.lineTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 1);
    ctx.beginPath();
    ctx.moveTo(60, 30);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.lineTo(60, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 2);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(120, 210);
    ctx.lineTo(60, 180);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 3);
    ctx.beginPath();
    ctx.moveTo(0, 75);
    ctx.lineTo(60, 180);
    ctx.lineTo(0, 150);
    ctx.lineTo(0, 75);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 4);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(60, 30);
    ctx.lineTo(0, 75);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 5);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 6);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(240, 195);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 7);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(240, 270);
    ctx.lineTo(180, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 8);
    ctx.beginPath();
    ctx.moveTo(120, 135);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 210);
    ctx.lineTo(120, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 9);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 135);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 10);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 285);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 11);
    ctx.beginPath();
    ctx.moveTo(180, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 345);
    ctx.lineTo(180, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 12);
    ctx.beginPath();
    ctx.moveTo(240, 345);
    ctx.lineTo(240, 420);
    ctx.lineTo(180, 390);
    ctx.lineTo(240, 345);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 13);
    ctx.beginPath();
    ctx.moveTo(120, 285);
    ctx.lineTo(180, 390);
    ctx.lineTo(120, 360);
    ctx.lineTo(120, 285);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 14);
    ctx.beginPath();
    ctx.moveTo(120, 210);
    ctx.lineTo(180, 240);
    ctx.lineTo(120, 285);
    ctx.lineTo(120, 210);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 15);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(180, 30);
    ctx.lineTo(300, 30);
    ctx.lineTo(300, 90);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 16);
    ctx.beginPath();
    ctx.moveTo(300, 30);
    ctx.lineTo(360, 60);
    ctx.lineTo(300, 90);
    ctx.lineTo(300, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 17);
    ctx.beginPath();
    ctx.moveTo(180, 90);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 120);
    ctx.lineTo(180, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 18);
    ctx.beginPath();
    ctx.moveTo(120, 60);
    ctx.lineTo(180, 30);
    ctx.lineTo(180, 90);
    ctx.lineTo(120, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 19);
    ctx.beginPath();
    ctx.moveTo(180, 30);
    ctx.lineTo(240, 0);
    ctx.lineTo(300, 30);
    ctx.lineTo(180, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 20);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 90);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 21);
    ctx.beginPath();
    ctx.moveTo(300, 90);
    ctx.lineTo(360, 60);
    ctx.lineTo(360, 135);
    ctx.lineTo(300, 90);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 22);
    ctx.beginPath();
    ctx.moveTo(300, 240);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 210);
    ctx.lineTo(300, 240);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 23);
    ctx.beginPath();
    ctx.moveTo(240, 195);
    ctx.lineTo(300, 240);
    ctx.lineTo(240, 270);
    ctx.lineTo(240, 195);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 24);
    ctx.beginPath();
    ctx.moveTo(240, 120);
    ctx.lineTo(300, 90);
    ctx.lineTo(240, 195);
    ctx.lineTo(240, 120);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 25);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 30);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 26);
    ctx.beginPath();
    ctx.moveTo(420, 30);
    ctx.lineTo(480, 0);
    ctx.lineTo(480, 75);
    ctx.lineTo(420, 30);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 27);
    ctx.beginPath();
    ctx.moveTo(420, 180);
    ctx.lineTo(480, 75);
    ctx.lineTo(480, 150);
    ctx.lineTo(420, 180);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 28);
    ctx.beginPath();
    ctx.moveTo(360, 135);
    ctx.lineTo(420, 180);
    ctx.lineTo(360, 210);
    ctx.lineTo(360, 135);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = corrcol(stickercol, 29);
    ctx.beginPath();
    ctx.moveTo(360, 60);
    ctx.lineTo(420, 30);
    ctx.lineTo(360, 135);
    ctx.lineTo(360, 60);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.translate(-10, -10);
}

function threeswap(listname,i,j,k) {
    [listname[j], listname[k]] = [listname[k], listname[j]];
    [listname[i], listname[j]] = [listname[j], listname[i]];
}
function fourswap(listname,i,j,k,l) {
    [listname[k], listname[l]] = [listname[l], listname[k]];
    [listname[j], listname[k]] = [listname[k], listname[j]];
    [listname[i], listname[j]] = [listname[j], listname[i]];
}

function corrcol(list,i) {
    if (list[i] === "o") {
        return '#ff8919';
    } else if (list[i] === "g") {
        return '#1aff3a';
    } else if (list[i] === "r") {
        return '#ff041a';
    } else if (list[i] === "b") {
        return '#465fff';
    } else if (list[i] === "w") {
        return '#ffffff';
    } else {
        return '#fffb11';
    }
}